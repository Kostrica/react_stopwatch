{"version":3,"sources":["components/DoubleClickButton.js","components/Stopwatch.js","App.js","reportWebVitals.js","index.js"],"names":["DoubleClickButton","timeout","className","title","delay","onSingleClick","onDoubleClick","clicks","useEffect","length","at","type","onClick","event","preventDefault","push","Date","getTime","clearTimeout","setTimeout","target","Stopwatch","useState","stopwatchTime","setStopwatchTime","stopwatchIsActive","setStopwatchIsActive","isDoubleClick","setIsDoubleClick","formattedTime","useMemo","time","Number","toFixed","hours","Math","floor","minutes","seconds","formattedSeconds","formattedMinutes","formattedHours","interval","setInterval","prevTime","clearInterval","cn","prevStatus","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAEe,SAASA,EAAT,GAAiH,IAE1HC,EAFsCC,EAAmF,EAAnFA,UAAWC,EAAwE,EAAxEA,MAAwE,IAAjEC,aAAiE,MAAzD,EAAyD,MAAtDC,qBAAsD,MAAtC,aAAsC,MAA5BC,qBAA4B,MAAZ,aAAY,EACvHC,EAAS,GAsBf,OANAC,qBAAU,WACJD,EAAOE,OAAS,KACRF,EAAOG,IAAI,GAAIH,EAAOG,IAAI,GAApC,yBAED,CAACH,IAGF,wBACEL,UAAWA,EACXS,KAAK,SACLC,QAvBJ,SAAsBC,GAClBA,EAAMC,iBACNP,EAAOQ,MAAK,IAAIC,MAAOC,WACvBC,aAAajB,GACbA,EAAUkB,YAAW,WACfZ,EAAOE,OAAS,GAAKF,EAAOG,IAAI,GAAKH,EAAOG,IAAI,GAAKN,EACvDE,EAAcO,EAAMO,QAEpBf,EAAcQ,EAAMO,UAErBhB,IAUL,SAKGD,IC1BQ,SAASkB,IACtB,MAA4CC,mBAAS,GAArD,mBAAQC,EAAR,KAAuBC,EAAvB,KACA,EAAoDF,oBAAS,GAA7D,mBAAQG,EAAR,KAA2BC,EAA3B,KACA,EAA4CJ,oBAAS,GAArD,mBAAQK,EAAR,KAAuBC,EAAvB,KAEMC,EAAgBC,mBAAQ,WAC5B,IAAMC,EAAOC,OAAOT,GAAeU,QAAQ,GACrCC,EAAQC,KAAKC,MAAML,EAAO,MAC1BM,EAAUF,KAAKC,OAAOL,EAAe,KAARG,GAAmB,KAChDI,GAAWP,EAAe,KAARG,EAA4B,IAAVG,GAAmB,IAE7D,GAAIH,GAAS,GACX,MAAO,QAGT,IAAMK,EAAmBD,EAAU,GAAV,WAAmBA,GAAYA,EAClDE,EAAmBH,EAAU,GAAV,WAAmBA,GAAYA,EAClDI,EAAiBP,EAAQ,GAAR,WAAiBA,GAAUA,EAElD,MAAM,GAAN,OAAUO,EAAV,YAA4BD,EAA5B,YAAgDD,KAC/C,CAAChB,IAuCJ,OAZAf,qBAAU,WACR,IAAMkC,EAAWC,aAAY,WACvBlB,GACFD,GAAiB,SAACoB,GAAD,OAAcA,EAAW,SAE3C,KAEH,OAAO,WACLC,cAAcH,MAEf,CAACjB,IAGF,sBAAKvB,UAAU,YAAf,UACE,qBAAKA,UAAU,aAAf,SACG2B,IAEH,sBAAK3B,UAAU,UAAf,UACE,wBACEA,UAAW4C,IACT,SACA,CACE,gBAAiBrB,EACjB,cAAeA,IAGnBd,KAAK,SACLC,QA5CgB,WAClBe,EACFC,GAAiB,GAEjBJ,EAAiB,GAGnBE,GAAqB,SAACqB,GAAD,OAAiBA,MA4BlC,SAWGtB,EAAoB,OAAS,UAEhC,cAACzB,EAAD,CACEE,UAAU,qBACVC,MAAM,OACNC,MAAO,IACPE,cA5Dc,WAChBmB,GACFC,GAAqB,GAGvBE,GAAiB,MAyDb,wBACE1B,UAAU,sBACVS,KAAK,SACLC,QA/Ce,WACjBW,IACFC,EAAiB,GACjBE,GAAqB,KAyCnB,yBC7EOsB,MATf,WACE,OACE,sBAAK9C,UAAU,UAAf,UACE,iDACA,cAACmB,EAAD,QCKS4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.81b2620f.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\n\nexport default function DoubleClickButton({ className, title, delay = 0, onSingleClick = () => {}, onDoubleClick = () => {} }) {\n  const clicks = [];\n  let timeout;\n\n  function clickHandler(event) {\n      event.preventDefault();\n      clicks.push(new Date().getTime());\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        if (clicks.length > 1 && clicks.at(-1) - clicks.at(-2) < delay) {\n          onDoubleClick(event.target);\n        } else {\n          onSingleClick(event.target);\n        }\n      }, delay);\n  }\n\n  useEffect(() => {\n    if (clicks.length > 10) {\n      clicks = [clicks.at(-2), clicks.at(-1)];\n    }\n  }, [clicks]);\n\n  return (\n    <button\n      className={className}\n      type=\"button\"\n      onClick={clickHandler}\n    >\n      {title}\n    </button>\n  );\n}\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport cn from 'classnames';\nimport DoubleClickButton from \"./DoubleClickButton\";\n\n\nexport default function Stopwatch() {\n  const [ stopwatchTime, setStopwatchTime ] = useState(0);\n  const [ stopwatchIsActive, setStopwatchIsActive ] = useState(false);\n  const [ isDoubleClick, setIsDoubleClick ] = useState(false);\n\n  const formattedTime = useMemo(() => {\n    const time = Number(stopwatchTime).toFixed(0);\n    const hours = Math.floor(time / 3600000);\n    const minutes = Math.floor((time - hours * 3600000) / 60000);\n    const seconds = (time - hours * 3600000 - minutes * 60000) / 1000;\n\n    if (hours >= 24) {\n      return '1day+'\n    }\n\n    const formattedSeconds = seconds < 10 ? `0${seconds}` : seconds;\n    const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;\n    const formattedHours = hours < 10 ? `0${hours}` : hours;\n\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n  }, [stopwatchTime]);\n\n  const onDoubleClick = () => {\n    if (stopwatchIsActive) {\n      setStopwatchIsActive(false);\n    }\n\n    setIsDoubleClick(true);\n  };\n\n  const toggleStopwatch = () => {\n    if (isDoubleClick) {\n      setIsDoubleClick(false);\n    } else {\n      setStopwatchTime(0);\n    }\n\n    setStopwatchIsActive((prevStatus) => !prevStatus);\n  }\n\n  const resetStopwatch = () => {\n    if (stopwatchTime) {\n      setStopwatchTime(0);\n      setStopwatchIsActive(true);\n    }\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (stopwatchIsActive) {\n        setStopwatchTime((prevTime) => prevTime + 1000);\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    }\n  }, [stopwatchIsActive]);\n\n  return (\n    <div className=\"stopwatch\">\n      <div className=\"scoreboard\">\n        {formattedTime}\n      </div>\n      <div className=\"control\">\n        <button\n          className={cn(\n            \"button\",\n            {\n              \"button-start\": !stopwatchIsActive,\n              \"button-stop\": stopwatchIsActive\n            }\n          )}\n          type=\"button\"\n          onClick={toggleStopwatch}\n        >\n          {stopwatchIsActive ? 'Stop' : 'Start'}\n        </button>\n        <DoubleClickButton\n          className=\"button button-wait\"\n          title=\"Wait\"\n          delay={300}\n          onDoubleClick={onDoubleClick}\n        />\n        <button\n          className=\"button button-reset\"\n          type=\"button\"\n          onClick={resetStopwatch}\n        >\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Stopwatch from \"./components/Stopwatch\";\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <h1>React Stopwatch</h1>\n      <Stopwatch />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}